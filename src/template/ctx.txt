# context-llemur: Collaborative Memory for Humans and LLMs

## What is ctx?
ctx is a version-controlled collaborative thinking system where ideas evolve through commits, branch into experiments, and merge across different minds (human and AI). 

Not a knowledge base, but a living memory that travels between LLM sessions.

## Key Problems We Solve
- **LLM Amnesia**: Every new session starts from zero
- **Lost Context**: Valuable conversations vanish when the window closes  
- **Linear Thinking**: Can't branch conversations or explore alternatives
- **Fragmented Memory**: Context scattered across different tools

## How It Works
ctx works like git, but for thoughts and ideas instead of code:
- **Commits** represent crystallized thoughts or decisions
- **Explorations** are alternative ways of investigating a concept  
- **Integrations** combine successful insight threads
- **History** preserves the evolution of thinking

## Available Commands

### Repository Management
```bash
ctx new                     # Create new ctx repository in 'context' directory
ctx new <directory>         # Create new ctx repository in custom directory  
ctx new --dir <directory>   # Alternative syntax for custom directory
ctx status                  # Show current branch and repository status
                           # Git equivalent: git status && git branch
ctx list                    # List all discovered ctx repositories with status
ctx switch <name>           # Switch to a different ctx repository
```

### Exploring Ideas (Branching)
```bash
ctx explore <topic>         # Start exploring a new topic or idea
                           # Git equivalent: git checkout -b <topic>
ctx save "<message>"     # Saves the current state of the context repository
                           # Git equivalent: git add -A && git commit -m "<message>"
```

### Integrating Insights (Merging)
```bash
ctx integrate <exploration>  # Integrate insights from an exploration
                            # Git equivalent: git merge <exploration>
ctx integrate <exploration> --preview # Preview what would be integrated
                            # Git equivalent: git merge <exploration> --no-commit
ctx integrate <exploration> --target <branch> # Integrate into specific target branch
                            # Git equivalent: git checkout <branch> && git merge <exploration>
```

## Git Command Mapping
For users familiar with git, here's the direct mapping:

| ctx Command | Git Equivalent | Purpose |
|-------------|----------------|---------|
| `ctx explore <topic>` | `git checkout -b <topic>` | Create and switch to new branch |
| `ctx save "<message>"` | `git add . && git commit -m "<message>"` | Stage and commit changes |
| `ctx integrate <branch>` | `git merge <branch>` | Merge branch into current |
| `ctx status` | `git status && git branch` | Show repo and branch status |

## Workflow Examples

### Starting a New Project
```bash
ctx new my-research         # Create repository in 'my-research' directory
cd my-research              # Navigate to the repository
# Edit ctx.txt and goals.txt with your context
ctx explore "bias-detection-methods" # git checkout -b bias-detection-methods
# Work on your ideas, document insights
ctx save "identified key bias sources in training data" # git add . && git commit -m "..."
ctx integrate "bias-detection-methods" --preview # Preview merge
ctx integrate "bias-detection-methods"  # git merge bias-detection-methods
```

### Collaborative Thinking
```bash
ctx status                  # Check current state (git status && git branch)
ctx explore "alternative-approach" # Create new exploration branch
# Document findings and insights
ctx save "discovered performance bottleneck in current approach"
ctx integrate "alternative-approach" --preview # Review before integrating
```

### Multiple Context Repositories
```bash
ctx new ideas               # Create 'ideas' directory
ctx new --dir research      # Create 'research' directory
ctx new work-projects       # Create 'work-projects' directory
# Each directory is a separate ctx repository
```

## Conventions

### Repository Structure
- Each ctx repository is identified by a `.ctx` marker file
- Repositories can be named anything (e.g., 'research', 'ideas', 'work-context')
- Multiple ctx repositories can coexist in the same workspace
- Commands work from any subdirectory within a ctx repository

### Branch Naming
- Use descriptive names: `bias-detection-approach`, `performance-optimization`
- Separate words with hyphens for readability

### Commit Strategy  
- Commit early and often to preserve thinking evolution
- Use clear commit messages that capture the insight or decision

### File Organization
- Keep files focused and readable for both humans and LLMs
- Use descriptive filenames that capture the content purpose
- Aim to keep total repository size manageable for LLM context

### Integration Protocol
- Always preview integrations first with `--preview` flag
- Main branch represents the current consensus/truth
- Exploration branches are for trying new ideas and approaches
- Resolve conflicts thoughtfully, preserving valuable insights from both sides

## Technical Notes
- ctx repositories are standard git repositories with additional tooling
- All git commands work normally within the ctx repository directory
- Files are stored as plain text for maximum compatibility
- Repository state travels with the ctx directory
- The `.ctx` marker file identifies ctx repositories
- A `ctx.config` file tracks active and discovered ctx repositories

### Simple Configuration Management
ctx uses a simple TOML configuration file (`ctx.config`) at your project root:
- **Active repository**: The currently selected ctx repository
- **Discovered repositories**: All known ctx repositories in your project
- **Automatic updates**: When you create a new ctx repository, it becomes the active one
- **Manual switching**: Use `ctx list` to see all repositories and their status

Example `ctx.config`:
```toml
active_ctx = "research"
discovered_ctx = ["context", "research", "experiments"]
```

This means you can run `ctx new` from your project root and immediately use `ctx status` without changing directories.

This file (ctx.txt) provides global context and should not be modified during normal usage.